G = (N, T, P, Decls)

N = {
    Decls, Decl , StmList, Stm, NormalStm, 
    VarDecl,  Array, OpConc, OpOr, OpAndXor,
    OpEquate, OpCompare, OpAdd, OpMult, OpUnary,
    Value, Type, Init, ParamDef, VarList, 
	ParamList, ParamLAux, OpCList
}

T = {
    '(', ')', '[', ']', '{', '}', ',', 
    ';', '=', '++', 'or', 'and', '^',
    '==', '!=',  '<', '>', '<=', '>=',
    '+', '-', '*', '/', '%', '!', 'Id',
    'CteInt', 'CteString', 'CteChar',
    'CteFloat', 'CteBool', 'char', 'int',
    'float', 'string', 'void', 'bool',
    'if', 'else', 'break', 'for', 'while', 'return',
    'input', 'output'
}

Categ = ER: {
    CtrlIf = 'if',  CtrlElse = 'else', LoopWhile = 'while', 
    LoopFor = 'for', Break = 'break', Return = 'return',
    Input  = 'input' , Output = 'output',  Integer = 'int' ,
    Float = 'float', Char = 'char' , Void = 'void', String = 'string',
    Boolean = 'bool', Parenth1= '(', Parenth2 = ')', Braces1 = '{', 
    Braces2 = '}', Bracket1 = '[', Bracket2 = ']', OpAdd = '+',  
    OpMinus = '-', OpDiv = '/', OpMult = '*',  
    OpRem = '%', OpConcat = '++', OpGreater = '>',  
    OpLesser = '<', OpGEqual = '>=', OpLEqual = '<=', 
    OpEqual = '==', OpDiff = '!=' , OpBinXor = '^',  
    OpNot = '!', OpAnd = 'and', OpOr = 'or',  
    Assign = '=', Comma = ',', Terminator = ';',
    Id = '[_a-zA-Z][_a-zA-Z0-9]*', dig = ‘[1-9]’,
    Dig = ‘[0-9]’, CteInt = '{Dig}{Dig}*',
    CteFloat = '({Dig})({Dig}*)\.({Dig}*)',
    CteChar = '\’[^\’]\’', CteString = '\”([^\”]*)\”',
    CteBool = '(true)|(false)'
}

P = {

    Decls = Decl Decls
            | ε

    Decl = Type 'Id' Array Init VarList ';'
            | Type 'Id' '(' ParamDef ')' '{' StmList '}'
		    | Type '[' ']' 'Id' '(' ParamDef ')' '{' StmList '}'

    ParamDef = Type Array 'Id' 
            | Type Array 'Id' ',' ParamDef
            | ε

    StmList = Stm StmList 
            | ε

    Stm = VarDecl
            | 'if' '(' OpConc ')' '{' StmList '}'          
            | 'if' '(' OpConc ')' '{' StmList '}' 'else' '{' StmList '}'         
            | 'while' '(' OpConc ')' '{' StmList '}' 
            | 'for' '(' 'Id' ';' 'Id' ';' 'Id' ';' 'Id' ')' '{' StmList '}' 
            | NormalStm

    NormalStm =  OpConc ';'
            | 'break' ';'
            | 'return' OpConc ';'
            | ';'          
            | 'input' '(' ParamList ')' ';'
            | 'output' '('  StringLiteral ',' ParamList ')' ';'    
    
    VarDecl = Type 'Id' Array Init VarList ';'

    Init = '=' OpConc
            | '=' '{' OpConc OpCList '}'
            | ε
    
    VarList = ',' 'Id' Array Init VarList
            | ε

	 Array = '[' OpConc ']'
            | '[' ']'
            | ε

    Expr = OpConc ',' Expr
            | OpConc 

    OpConc = OpConc '++' OpOr
            | OpConc '=' OpOr
            | '(' Type ')' 'Id' 
            | '(' OpConc ')'
            | OpOr
           

    OpOr = OpOr 'or' OpAndXor
            | OpAndXor

    OpAndXor = OpAndXor 'and' OpEquate
            | OpAndXor '^' OpEquate
            | OpEquate

    OpEquate = OpEquate '==' OpCompare
            | OpEquate '!=' OpCompare
            | OpCompare

    OpCompare = OpCompare '<' OpAdd
            | OpCompare '>' OpAdd
            | OpCompare '<=' OpAdd
            | OpCompare '>=' OpAdd
            | OpAdd

    OpAdd = OpAdd '+' OpMult
            | OpAdd '-' OpMult
            | OpMult

    OpMult = OpMult '*' OpUnary
            | OpMult '/' OpUnary
            | OpMult '%' OpUnary
            | OpUnary

    OpUnary = '!' OpUnary
            | '-' OpUnary
            | '+' OpUnary   
            | Value


    Value = 'CteInt'
            | 'CteString'
            | 'CteChar'
            | 'CteFloat'
            | 'CteBool'
            | 'Id' '(' ParamList ')'
            | 'Id' '[' OpConc ']'            
            | 'Id'
    
    ParamList = 'Id' ParamLAux 
            |  ε
	
	ParamLAux = ',' 'Id' ParamLAux
            | ε
	
	OpCList = ',' OpConc OpCList
            | ε
    
	Type = 'char'
            | 'int'
            | 'float'
            | 'string'
            | 'void'
            | 'bool'    

}
