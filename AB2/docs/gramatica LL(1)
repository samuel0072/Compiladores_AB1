G' = (N', T, P', Decls)

N' = {
    Decls, Decl, FuncDecl, FuncId, Params, Param
    Block, StmList, Stm, NormalStm, VarDecl, VarList,
    Var, Array, ExprList, Expr, OpConc, OpOr, OpAndXor,
    OpEquate, OpCompare, OpAdd, OpMult, OpUnary,
    Value, Type, VarBux, VarAux, ArrayAux, ExprAux, 
    OpCAux, OpOrAux, OpAXAux, OpEAux, OpCAux, OpAddAux,
    OpMAux, ValueAux, ParamAux
}

T = {
    '(', ')', '[', ']', '{', '}', ',', 
    ';', '=', '++', 'or', 'and', '^',
    '==', '!=',  '<', '>', '<=', '>=',
    '+', '-', '*', '/', '%', '!', 'Id',
    'CteInt', 'CteString', 'CteChar',
    'CteFloat', 'CteBool', 'char', 'int',
    'float', 'string', 'void', 'bool'
}

Categ = ER: {
    CtrlIf = 'if',  CtrlElse = 'else', LoopWhile = 'while', 
    LoopFor = 'for', Break = 'break', Return = 'return',
    Input  = 'input' , Output = 'output',  Integer = 'int' ,
    Float = 'float', Char = 'char' , Void = 'void', String = 'string',
    Boolean = 'bool', Parenth1= '(', Parenth2 = ')', Braces1 = '{', 
    Braces2 = '}', Bracket1 = '[', Bracket2 = ']', OpAdd = '+',  
    OpMinus = '-', OpDiv = '/', OpMult = '*',  
    OpRem = '%', OpConcat = '++', OpGreater = '>',  
    OpLesser = '<', OpGEqual = '>=', OpLEqual = '<=', 
    OpEqual = '==', OpDiff = '!=' , OpBinXor = '^',  
    OpNot = '!', OpAnd = 'and', OpOr = 'or',  
    Assign = '=', Comma = ',', Terminator = ';',
    Id = '[_a-zA-Z][_a-zA-Z0-9]*', dig = ‘[1-9]’,
    Dig = ‘[0-9]’, CteInt = '{Dig}{Dig}*',
    CteFloat = '({Dig})({Dig}*)\.({Dig}*)',
    CteChar = '\’[^\’]\’', CteString = '\”([^\”]*)\”',
    CteBool = '(true)|(false)'
}

P' = {
    Decls = Decl Decls
            | ε

    Decl = FuncDecl
            | VarDecl
                

    FuncDecl = FuncId '(' FuncDeclAux
    
    FuncDeclAux = Params  ')' Block
            | ')' Block

    FuncId = Type FuncIdAux

    FuncIdAux = 'Id'
            | '[' ']' 'Id'

    Params = Param ParamsAux

    ParamsAux = ',' Params
            | ε
                
    Param = Type 'Id'

    Block = '{' StmList '}' 

    StmList = Stm StmList 
            | ε

    Stm = VarDecl
            | 'if' '(' Expr ')' Block ElseStm        
            | 'while' '(' Expr ')' Block 
            | 'for' '(' 'Id' ';' 'Id' ';' 'Id' ';' 'Id' ')' Block 
            | NormalStm

    ElseStm = 'else' Block
            | ε

    NormalStm =  Assing ';'
            | 'break' ';'
            | 'return' OpConc ';'
            | ';'          
            | 'input' '(' Expr ')' ';'
            | 'output' '('  StringLiteral ',' Expr ')' ';'    

    VarDecl =  Type Var VarList  ';'

    VarList =  ',' Var VarList
            | ε
                
    Var = 'Id' Array VarBux

    VarBux = '=' VarAux
            | ε

    VarAux = OpConc
            | '{'  Expr '}'

    
    Array = '[' ArrayAux 
            | ε

    ArrayAux = OpConc ']'
            | ']'

    Assing = 'Id' '=' OpConc

    Expr = OpConc ExprAux

    ExprAux = ',' Expr
            | ε

    OpConc = OpOr OpCAux

    OpCAux = '++' OpOr OpCAux
            | ε
    

    OpOr = OpAndXor OpOrAux

    OpOrAux = 'or' OpAndXor OpOrAux
            | ε

    OpAndXor = OpEquate OpAXAux

    OpAXAux = 'and' OpEquate OpAXAux
            | '^' OpEquate OpAXAux
            | ε

    OpEquate = OpCompare OpEAux

    OpEAux = '==' OpCompare OpEAux
            | '!=' OpCompare OpEAux
            | ε

    OpCompare = OpAdd OpCAux

    OpCAux = '<' OpAdd OpCAux
            | '>' OpAdd OpCAux
            | '<=' OpAdd OpCAux
            | '>=' OpAdd OpCAux
            | ε
 
    OpAdd = OpMult OpAddAux

    OpAddAux = '+' OpMult OpAddAux
            | '-' OpMult OpAddAux
            | ε

    OpMult = OpUnary OpMAux

    OpMAux = '*' OpUnary OpMAux
            | '/' OpUnary OpMAux
            | '%' OpUnary OpMAux
            | ε

    OpUnary = '!' OpUnary
            | '-' OpUnary
            | '+' OpaUnary
            | '(' Type ')' OpUnary   
            | Value


    Value = 'CteInt'
            | 'CteString'
            | 'CteChar'
            | 'CteFloat'
            | 'CteBool'
            | 'Id' ValueAux
            | '(' OpConc ')'

    ValueAux = '(' ParamAux ')'
            | ε

    ParamAux =  Expr 
            |  ε


    Type = 'char'
            | 'int'
            | 'float'
            | 'string'
            | 'void'
            | 'bool'          
}
