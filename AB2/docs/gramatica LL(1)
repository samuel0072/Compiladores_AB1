G' = (N', T, P', Decls)

N' = {
    Decls, Decl , StmList, Stm, NormalStm, 
    VarDecl,  Array, OpConc, OpOr, OpAndXor, 
    OpEquate, OpCompare, OpAdd, OpMult, OpUnary, 
    Value, Type, Init, ParamDef, ArrayAux, 
    OpCoAux, ParamDAux, OpCoBux, OpOrAux, OpAXAux, 
    OpEAux, OpCAux,  OpAddAux,OpMAux, ValueAux, 
    InitAux, VarList, ParamList, DeclAux, DeclBux, ElseStm,
    ParamLAux, OpCList
}

T = {
    '(', ')', '[', ']', '{', '}', ',', 
    ';', '=', '++', 'or', 'and', '^',
    '==', '!=',  '<', '>', '<=', '>=',
    '+', '-', '*', '/', '%', '!', 'Id',
    'CteInt', 'CteString', 'CteChar',
    'CteFloat', 'CteBool', 'char', 'int',
    'float', 'string', 'void', 'bool', 'def',
    'if', 'else', 'break', 'for', 'while', 'return',
    'input', 'output'
}

Categ = ER: {
    CtrlIf = 'if',  CtrlElse = 'else', LoopWhile = 'while', 
    LoopFor = 'for', Break = 'break', Return = 'return',
    Input  = 'input' , Output = 'output',  Integer = 'int' ,
    Float = 'float', Char = 'char' , Void = 'void', String = 'string',
    Boolean = 'bool', Parenth1= '(', Parenth2 = ')', Braces1 = '{', 
    Braces2 = '}', Bracket1 = '[', Bracket2 = ']', OpAdd = '+',  
    OpMinus = '-', OpDiv = '/', OpMult = '*',  
    OpRem = '%', OpConcat = '++', OpGreater = '>',  
    OpLesser = '<', OpGEqual = '>=', OpLEqual = '<=', 
    OpEqual = '==', OpDiff = '!=' , OpBinXor = '^',  
    OpNot = '!', OpAnd = 'and', OpOr = 'or',  
    Assign = '=', Comma = ',', Terminator = ';',
    Id = '[_a-zA-Z][_a-zA-Z0-9]*', dig = ‘[1-9]’,
    Dig = ‘[0-9]’, CteInt = '{Dig}{Dig}*',
    CteFloat = '({Dig})({Dig}*)\.({Dig}*)',
    CteChar = '\’[^\’]\’', CteString = '\”([^\”]*)\”',
    CteBool = '(true)|(false)'
}

P' = {

( 1)    Decls = Decl Decls
( 2)            | ε
        
( 3)    Decl = Type DeclAux
            
( 4)    DeclAux = 'Id' DeclBux
( 5)             | '[' ']' 'Id' '(' ParamDef ')' '{' StmList '}'

( 6)    DeclBux = Array Init VarList ';'
( 7)             | '(' ParamDef ')' '{' StmList '}'        

( 8)    ParamDef = Type Array 'Id' ParamDAux
( 9)            | ε

(10)    ParamDAux = ',' Type Array 'Id' ParamDAux
(11)            | ε

(12)    StmList = Stm StmList 
(13)            | ε

(14)    Stm = VarDecl
(15)            | 'if' '(' OpConc ')' '{' StmList '}' ElseStm               
(16)            | 'while' '(' Expr ')' '{' StmList '}' 
(17)            | 'for' '(' 'Id' ';' 'Id' ';' 'Id' ';' 'Id' ')' '{' StmList '}' 
(18)            | NormalStm

(19)    ElseStm = 'else' '{' StmList '}' 
(20)           | ε

(21)    NormalStm =  OpConc ';'
(22)            | 'break' ';'
(23)            | 'return' OpConc ';'
(24)            | ';'          
(25)            | 'input' '(' ParamList ')' ';'
(26)            | 'output' '('  StringLiteral ',' ParamList ')' ';'    

(27)    VarDecl = Type 'Id' Array Init VarList ';'

(28)    VarList = ',' 'Id' Array Init VarList
(29)            | ε

(30)    Init = '=' InitAux
(31)            | ε

(32)    InitAux = OpConc
(33)            | '{' OpConc OpCList '}'

(34)    Array = '[' ArrayAux
(35)            | ε
    
(36)    ArrayAux = OpConc ']'
(37)            | ']'

(38)    OpConc = OpOr OpCoAux
(39)            | '(' OpCoBux

(40)    OpCoAux = '++' OpOr OpCoAux
(41)            | '=' OpOr OpCoAux
(42)            | ε

(43)    OpCoBux = Type ')' 'Id'
(44)            | OpOr OpCoAux ')'
(45)            | '(' OpCoBux ')'

(46)    OpOr = OpAndXor OpOrAux

(47)    OpOrAux = 'or' OpAndXor OpOrAux
(48)            | ε

(49)    OpAndXor = OpEquate OpAXAux

(50)    OpAXAux = 'and' OpEquate OpAXAux
(51)            | '^' OpEquate OpAXAux
(52)            | ε

(53)    OpEquate = OpCompare OpEAux

(54)    OpEAux = '==' OpCompare OpEAux
(55)            | '!=' OpCompare OpEAux
(56)            | ε

(57)    OpCompare = OpAdd OpCAux

(58)    OpCAux = '<' OpAdd OpCAux
(59)            | '>' OpAdd OpCAux
(60)            | '<=' OpAdd OpCAux
(61)            | '>=' OpAdd OpCAux
(62)            | ε
 
(63)    OpAdd = OpMult OpAddAux

(64)    OpAddAux = '+' OpMult OpAddAux
(65)            | '-' OpMult OpAddAux
(66)            | ε

(67)    OpMult = OpUnary OpMAux

(68)    OpMAux = '*' OpUnary OpMAux
(69)            | '/' OpUnary OpMAux
(70)            | '%' OpUnary OpMAux
(71)            | ε

(72)    OpUnary = '!' OpUnary
(73)            | '-' OpUnary
(74)            | '+' OpUnary  
(75)            | Value

(76)    Value = 'CteInt'
(77)            | 'CteString'
(78)            | 'CteChar'
(79)            | 'CteFloat'
(80)            | 'CteBool'
(81)            | 'Id' ValueAux

(82)    ValueAux = '(' ParamList ')'
(83)            | ε

(84)    ParamList =  'Id' ParamLAux 
(85)            | ε
        
(86)    ParamLAux = ',' 'Id' ParamLAux
(87)            | ε

(88)    OpCList = ',' OpConc OpCList
(89)            | ε

(90)    Type = 'char'
(91)            | 'int'
(92)            | 'float'
(93)            | 'string'
(94)            | 'void'
(95)            | 'bool'          
}
