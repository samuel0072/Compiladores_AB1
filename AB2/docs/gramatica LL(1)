G' = (N', T, P', Decls)

N' = {
    Decls, Decl , StmList, Stm, NormalStm, 
    VarDecl,  Array, Expr, OpConc, OpOr, OpAndXor,
    OpEquate, OpCompare, OpAdd, OpMult, OpUnary,
    Value, Type, Init, ParamDef, VarList
    ArrayAux, ExprAux, OpCAux,OpCBux, OpOrAux, 
    OpAXAux, OpEAux, OpCAux, OpAddAux,
    OpMAux, ValueAux, ParamAux, InitAux, 
    ParamDAux
}

T = {
    '(', ')', '[', ']', '{', '}', ',', 
    ';', '=', '++', 'or', 'and', '^',
    '==', '!=',  '<', '>', '<=', '>=',
    '+', '-', '*', '/', '%', '!', 'Id',
    'CteInt', 'CteString', 'CteChar',
    'CteFloat', 'CteBool', 'char', 'int',
    'float', 'string', 'void', 'bool', 'def',
    'if', 'else', 'break', 'for', 'while', 'return',
    'input', 'output'
}

Categ = ER: {
    CtrlIf = 'if',  CtrlElse = 'else', LoopWhile = 'while', 
    LoopFor = 'for', Break = 'break', Return = 'return',
    Input  = 'input' , Output = 'output',  Integer = 'int' ,
    Float = 'float', Char = 'char' , Void = 'void', String = 'string',
    Boolean = 'bool', Parenth1= '(', Parenth2 = ')', Braces1 = '{', 
    Braces2 = '}', Bracket1 = '[', Bracket2 = ']', OpAdd = '+',  
    OpMinus = '-', OpDiv = '/', OpMult = '*',  
    OpRem = '%', OpConcat = '++', OpGreater = '>',  
    OpLesser = '<', OpGEqual = '>=', OpLEqual = '<=', 
    OpEqual = '==', OpDiff = '!=' , OpBinXor = '^',  
    OpNot = '!', OpAnd = 'and', OpOr = 'or',  
    Assign = '=', Comma = ',', Terminator = ';', Def = 'def',
    Id = '[_a-zA-Z][_a-zA-Z0-9]*', dig = ‘[1-9]’,
    Dig = ‘[0-9]’, CteInt = '{Dig}{Dig}*',
    CteFloat = '({Dig})({Dig}*)\.({Dig}*)',
    CteChar = '\’[^\’]\’', CteString = '\”([^\”]*)\”',
    CteBool = '(true)|(false)'
}

P' = {
    Decls = Decl Decls
            | ε

    Decl = VarDecl
        | 'def' Type Array 'Id' '(' ParamDef ')' '{' StmList '}'

    ParamDef = Type Array 'Id' ParamDAux
            | ε

    ParamDAux = ',' ParamDef
            | ε

    StmList = Stm StmList 
            | ε

    Stm = VarDecl
            | 'if' '(' OpConc ')' '{' StmList '}' ElseStm               
            | 'while' '(' Expr ')' '{' StmList '}' 
            | 'for' '(' 'Id' ';' 'Id' ';' 'Id' ';' 'Id' ')' '{' StmList '}' 
            | NormalStm

    ElseStm = 'else' '{' StmList '}' 
            | ε

    NormalStm =  OpConc ';'
            | 'break' ';'
            | 'return' OpConc ';'
            | ';'          
            | 'input' '(' Expr ')' ';'
            | 'output' '('  StringLiteral ',' Expr ')' ';'    

    VarDecl = Type 'Id' Array Init DefList ';'

    Init = '=' InitAux
            | ε

    InitAux = OpConc
            | '{' Expr '}'

    Array = '[' ArrayAux
            | ε
    
    ArrayAux = OpConc ']'
            | ']'

    OpConc = OpOr OpCAux
            | '(' OpCBux

    OpCAux = '++' OpOr OpCAux
            | '=' OpOr OpCAux
            | ε

    OpCBux = Type ')' 'Id'
            | OpOr OpCAux ')'
            | '(' OpCBux ')'

    OpOr = OpAndXor OpOrAux

    OpOrAux = 'or' OpAndXor OpOrAux
            | ε

    OpAndXor = OpEquate OpAXAux

    OpAXAux = 'and' OpEquate OpAXAux
            | '^' OpEquate OpAXAux
            | ε

    OpEquate = OpCompare OpEAux

    OpEAux = '==' OpCompare OpEAux
            | '!=' OpCompare OpEAux
            | ε

    OpCompare = OpAdd OpCAux

    OpCAux = '<' OpAdd OpCAux
            | '>' OpAdd OpCAux
            | '<=' OpAdd OpCAux
            | '>=' OpAdd OpCAux
            | ε
 
    OpAdd = OpMult OpAddAux

    OpAddAux = '+' OpMult OpAddAux
            | '-' OpMult OpAddAux
            | ε

    OpMult = OpUnary OpMAux

    OpMAux = '*' OpUnary OpMAux
            | '/' OpUnary OpMAux
            | '%' OpUnary OpMAux
            | ε

    OpUnary = '!' OpUnary
            | Value

    Value = 'CteInt'
            | 'CteString'
            | 'CteChar'
            | 'CteFloat'
            | 'CteBool'
            | 'Id' ValueAux

    ValueAux = '(' ParamAux ')'
            | ε

    ParamAux =  Expr 
            |  ε

    Expr = OpConc ExprAux

    ExprAux = ',' Expr
            | ε

    Type = 'char'
            | 'int'
            | 'float'
            | 'string'
            | 'void'
            | 'bool'          
}
