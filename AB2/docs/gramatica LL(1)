G' = (N', T, P', Decls)

N' = {
    Decls, Decl , StmList, Stm, NormalStm, 
    VarDecl,  Array, OpConc, OpOr, OpAndXor, 
    OpEquate, OpCompare, OpAdd, OpMult, OpUnary, 
    Value, Type, Init, ParamDef, ArrayAux, 
    OpCoAux, ParamDAux, OpCoBux, OpOrAux, OpAXAux, 
    OpEAux, OpCAux,  OpAddAux,OpMAux, ValueAux, 
    InitAux, VarList, ParamList
}

T = {
    '(', ')', '[', ']', '{', '}', ',', 
    ';', '=', '++', 'or', 'and', '^',
    '==', '!=',  '<', '>', '<=', '>=',
    '+', '-', '*', '/', '%', '!', 'Id',
    'CteInt', 'CteString', 'CteChar',
    'CteFloat', 'CteBool', 'char', 'int',
    'float', 'string', 'void', 'bool', 'def',
    'if', 'else', 'break', 'for', 'while', 'return',
    'input', 'output'
}

Categ = ER: {
    CtrlIf = 'if',  CtrlElse = 'else', LoopWhile = 'while', 
    LoopFor = 'for', Break = 'break', Return = 'return',
    Input  = 'input' , Output = 'output',  Integer = 'int' ,
    Float = 'float', Char = 'char' , Void = 'void', String = 'string',
    Boolean = 'bool', Parenth1= '(', Parenth2 = ')', Braces1 = '{', 
    Braces2 = '}', Bracket1 = '[', Bracket2 = ']', OpAdd = '+',  
    OpMinus = '-', OpDiv = '/', OpMult = '*',  
    OpRem = '%', OpConcat = '++', OpGreater = '>',  
    OpLesser = '<', OpGEqual = '>=', OpLEqual = '<=', 
    OpEqual = '==', OpDiff = '!=' , OpBinXor = '^',  
    OpNot = '!', OpAnd = 'and', OpOr = 'or',  
    Assign = '=', Comma = ',', Terminator = ';', Def = 'def',
    Id = '[_a-zA-Z][_a-zA-Z0-9]*', dig = ‘[1-9]’,
    Dig = ‘[0-9]’, CteInt = '{Dig}{Dig}*',
    CteFloat = '({Dig})({Dig}*)\.({Dig}*)',
    CteChar = '\’[^\’]\’', CteString = '\”([^\”]*)\”',
    CteBool = '(true)|(false)'
}

P' = {

( 1)    Decls = Decl Decls
( 2)            | ε

( 3)    Decl = VarDecl
( 4)        | 'def' Type Array 'Id' '(' ParamDef ')' '{' StmList '}'

( 5)    ParamDef = Type Array 'Id' ParamDAux
( 6)            | ε

( 7)    ParamDAux = ',' ParamDef
( 8)            | ε

( 9)    StmList = Stm StmList 
(10)            | ε

(11)    Stm = VarDecl
(12)            | 'if' '(' OpConc ')' '{' StmList '}' ElseStm               
(13)            | 'while' '(' Expr ')' '{' StmList '}' 
(14)            | 'for' '(' 'Id' ';' 'Id' ';' 'Id' ';' 'Id' ')' '{' StmList '}' 
(15)            | NormalStm

(16)    ElseStm = 'else' '{' StmList '}' 
(17)           | ε
(18)    NormalStm =  OpConc ';'
(19)            | 'break' ';'
(20)            | 'return' OpConc ';'
(21)            | ';'          
(22)            | 'input' '(' OpConc ParamList ')' ';'
(23)            | 'output' '('  StringLiteral ',' OpConc ParamList ')' ';'    

(24)    VarDecl = Type 'Id' Array Init VarList ';'

(25)    VarList = ',' 'Id' Array Init VarList
(26)            | ε

(27)    Init = '=' InitAux
(28)            | ε

(29)    InitAux = OpConc
(30)            | '{' OpConc ParamList '}'

(31)    Array = '[' ArrayAux
(32)            | ε
    
(33)    ArrayAux = OpConc ']'
(34)            | ']'

(35)    OpConc = OpOr OpCoAux
(36)            | '(' OpCBux

(37)    OpCoAux = '++' OpOr OpCoAux
(38)            | '=' OpOr OpCoAux
(39)            | ε

(40)    OpCoBux = Type ')' 'Id'
(41)            | OpOr OpCoAux ')'
(42)            | '(' OpCoBux ')'

(43)    OpOr = OpAndXor OpOrAux

(44)    OpOrAux = 'or' OpAndXor OpOrAux
(45)            | ε

(46)    OpAndXor = OpEquate OpAXAux

(47)    OpAXAux = 'and' OpEquate OpAXAux
(48)            | '^' OpEquate OpAXAux
(49)            | ε

(50)    OpEquate = OpCompare OpEAux

(51)    OpEAux = '==' OpCompare OpEAux
(52)            | '!=' OpCompare OpEAux
(53)            | ε

(54)    OpCompare = OpAdd OpCAux

(55)    OpCAux = '<' OpAdd OpCAux
(56)            | '>' OpAdd OpCAux
(57)            | '<=' OpAdd OpCAux
(58)            | '>=' OpAdd OpCAux
(59)            | ε
 
(60)    OpAdd = OpMult OpAddAux

(61)    OpAddAux = '+' OpMult OpAddAux
(62)            | '-' OpMult OpAddAux
(63)            | ε

(64)    OpMult = OpUnary OpMAux

(65)    OpMAux = '*' OpUnary OpMAux
(66)            | '/' OpUnary OpMAux
(67)            | '%' OpUnary OpMAux
(68)            | ε

(69)    OpUnary = '!' OpUnary
(70)            | '-' OpUnary
(71)            | '+' OpUnary  
(72)            | Value

(73)    Value = 'CteInt'
(74)            | 'CteString'
(75)            | 'CteChar'
(76)            | 'CteFloat'
(77)            | 'CteBool'
(78)            | 'Id' ValueAux

(79)    ValueAux = '(' OpConc ParamList ')'
                | '(' ')'
(80)            | ε

(81)    ParamList =  ',' OpConc ParamList 
(82)            |  ε

(83)    Type = 'char'
(84)            | 'int'
(85)            | 'float'
(86)            | 'string'
(87)            | 'void'
(88)            | 'bool'          
}
