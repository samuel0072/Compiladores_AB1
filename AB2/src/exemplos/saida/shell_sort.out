   1  //
   2  void shellSort(int vet[], int size){
          [0002, 0001] (0012,                 Void) {void}
          [0002, 0006] (0041,                   Id) {shellSort}
          [0002, 0015] (0015,             Parenth1) {(}
          [0002, 0016] (0009,              Integer) {int}
          [0002, 0020] (0041,                   Id) {vet}
          [0002, 0023] (0019,             Bracket1) {[}
          [0002, 0024] (0020,             Bracket2) {]}
          [0002, 0025] (0038,                Comma) {,}
          [0002, 0027] (0009,              Integer) {int}
          [0002, 0031] (0041,                   Id) {size}
          [0002, 0035] (0016,             Parenth2) {)}
          [0002, 0036] (0017,              Braces1) {{}
   3  
   4      int i , j , value;
          [0004, 0005] (0009,              Integer) {int}
          [0004, 0009] (0041,                   Id) {i}
          [0004, 0011] (0038,                Comma) {,}
          [0004, 0013] (0041,                   Id) {j}
          [0004, 0015] (0038,                Comma) {,}
          [0004, 0017] (0041,                   Id) {value}
          [0004, 0022] (0039,           Terminator) {;}
   5      int gap = 1;
          [0005, 0005] (0009,              Integer) {int}
          [0005, 0009] (0041,                   Id) {gap}
          [0005, 0013] (0037,               Assign) {=}
          [0005, 0015] (0042,               CteInt) {1}
          [0005, 0016] (0039,           Terminator) {;}
   6             
   7      while(gap < size) {
          [0007, 0005] (0003,            LoopWhile) {while}
          [0007, 0010] (0015,             Parenth1) {(}
          [0007, 0011] (0041,                   Id) {gap}
          [0007, 0015] (0028,             OpLesser) {<}
          [0007, 0017] (0041,                   Id) {size}
          [0007, 0021] (0016,             Parenth2) {)}
          [0007, 0023] (0017,              Braces1) {{}
   8          gap = 3*gap+1;
          [0008, 0009] (0041,                   Id) {gap}
          [0008, 0013] (0037,               Assign) {=}
          [0008, 0015] (0042,               CteInt) {3}
          [0008, 0016] (0024,               OpMult) {*}
          [0008, 0017] (0041,                   Id) {gap}
          [0008, 0020] (0021,                OpAdd) {+}
          [0008, 0021] (0042,               CteInt) {1}
          [0008, 0022] (0039,           Terminator) {;}
   9      }
          [0009, 0005] (0018,              Braces2) {}}
  10  
  11      while (gap > 0) {
          [0011, 0005] (0003,            LoopWhile) {while}
          [0011, 0011] (0015,             Parenth1) {(}
          [0011, 0012] (0041,                   Id) {gap}
          [0011, 0016] (0027,            OpGreater) {>}
          [0011, 0018] (0042,               CteInt) {0}
          [0011, 0019] (0016,             Parenth2) {)}
          [0011, 0021] (0017,              Braces1) {{}
  12          for (i, gap, size, 1) {
          [0012, 0009] (0004,              LoopFor) {for}
          [0012, 0013] (0015,             Parenth1) {(}
          [0012, 0014] (0041,                   Id) {i}
          [0012, 0015] (0038,                Comma) {,}
          [0012, 0017] (0041,                   Id) {gap}
          [0012, 0020] (0038,                Comma) {,}
          [0012, 0022] (0041,                   Id) {size}
          [0012, 0026] (0038,                Comma) {,}
          [0012, 0028] (0042,               CteInt) {1}
          [0012, 0029] (0016,             Parenth2) {)}
          [0012, 0031] (0017,              Braces1) {{}
  13              value = vet[i];
          [0013, 0013] (0041,                   Id) {value}
          [0013, 0019] (0037,               Assign) {=}
          [0013, 0021] (0041,                   Id) {vet}
          [0013, 0024] (0019,             Bracket1) {[}
          [0013, 0025] (0041,                   Id) {i}
          [0013, 0026] (0020,             Bracket2) {]}
          [0013, 0027] (0039,           Terminator) {;}
  14              j = i;
          [0014, 0013] (0041,                   Id) {j}
          [0014, 0015] (0037,               Assign) {=}
          [0014, 0017] (0041,                   Id) {i}
          [0014, 0018] (0039,           Terminator) {;}
  15              while (j > gap-1 and value <= vet[j - gap]) {
          [0015, 0013] (0003,            LoopWhile) {while}
          [0015, 0019] (0015,             Parenth1) {(}
          [0015, 0020] (0041,                   Id) {j}
          [0015, 0022] (0027,            OpGreater) {>}
          [0015, 0024] (0041,                   Id) {gap}
          [0015, 0027] (0022,              OpMinus) {-}
          [0015, 0028] (0042,               CteInt) {1}
          [0015, 0030] (0035,                OpAnd) {and}
          [0015, 0034] (0041,                   Id) {value}
          [0015, 0040] (0030,             OpLEqual) {<=}
          [0015, 0043] (0041,                   Id) {vet}
          [0015, 0046] (0019,             Bracket1) {[}
          [0015, 0047] (0041,                   Id) {j}
          [0015, 0049] (0022,              OpMinus) {-}
          [0015, 0051] (0041,                   Id) {gap}
          [0015, 0054] (0020,             Bracket2) {]}
          [0015, 0055] (0016,             Parenth2) {)}
          [0015, 0057] (0017,              Braces1) {{}
  16                  vet[j] = vet [j - gap];
          [0016, 0017] (0041,                   Id) {vet}
          [0016, 0020] (0019,             Bracket1) {[}
          [0016, 0021] (0041,                   Id) {j}
          [0016, 0022] (0020,             Bracket2) {]}
          [0016, 0024] (0037,               Assign) {=}
          [0016, 0026] (0041,                   Id) {vet}
          [0016, 0030] (0019,             Bracket1) {[}
          [0016, 0031] (0041,                   Id) {j}
          [0016, 0033] (0022,              OpMinus) {-}
          [0016, 0035] (0041,                   Id) {gap}
          [0016, 0038] (0020,             Bracket2) {]}
          [0016, 0039] (0039,           Terminator) {;}
  17                  j = j - gap;
          [0017, 0017] (0041,                   Id) {j}
          [0017, 0019] (0037,               Assign) {=}
          [0017, 0021] (0041,                   Id) {j}
          [0017, 0023] (0022,              OpMinus) {-}
          [0017, 0025] (0041,                   Id) {gap}
          [0017, 0028] (0039,           Terminator) {;}
  18              }
          [0018, 0013] (0018,              Braces2) {}}
  19              vet[j] = value;
          [0019, 0013] (0041,                   Id) {vet}
          [0019, 0016] (0019,             Bracket1) {[}
          [0019, 0017] (0041,                   Id) {j}
          [0019, 0018] (0020,             Bracket2) {]}
          [0019, 0020] (0037,               Assign) {=}
          [0019, 0022] (0041,                   Id) {value}
          [0019, 0027] (0039,           Terminator) {;}
  20          }
          [0020, 0009] (0018,              Braces2) {}}
  21          gap = gap/3;
          [0021, 0009] (0041,                   Id) {gap}
          [0021, 0013] (0037,               Assign) {=}
          [0021, 0015] (0041,                   Id) {gap}
          [0021, 0018] (0023,                OpDiv) {/}
          [0021, 0019] (0042,               CteInt) {3}
          [0021, 0020] (0039,           Terminator) {;}
  22      }
          [0022, 0005] (0018,              Braces2) {}}
  23  }
          [0023, 0001] (0018,              Braces2) {}}
  24  
  25  int main(){
          [0025, 0001] (0009,              Integer) {int}
          [0025, 0005] (0041,                   Id) {main}
          [0025, 0009] (0015,             Parenth1) {(}
          [0025, 0010] (0016,             Parenth2) {)}
          [0025, 0011] (0017,              Braces1) {{}
  26  
  27      int i, tam;
          [0027, 0005] (0009,              Integer) {int}
          [0027, 0009] (0041,                   Id) {i}
          [0027, 0010] (0038,                Comma) {,}
          [0027, 0012] (0041,                   Id) {tam}
          [0027, 0015] (0039,           Terminator) {;}
  28  
  29      input(tam);
          [0029, 0005] (0007,                Input) {input}
          [0029, 0010] (0015,             Parenth1) {(}
          [0029, 0011] (0041,                   Id) {tam}
          [0029, 0014] (0016,             Parenth2) {)}
          [0029, 0015] (0039,           Terminator) {;}
  30  
  31      int vet[tam];
          [0031, 0005] (0009,              Integer) {int}
          [0031, 0009] (0041,                   Id) {vet}
          [0031, 0012] (0019,             Bracket1) {[}
          [0031, 0013] (0041,                   Id) {tam}
          [0031, 0016] (0020,             Bracket2) {]}
          [0031, 0017] (0039,           Terminator) {;}
  32  
  33      for (i, 0, tam-1, 1){
          [0033, 0005] (0004,              LoopFor) {for}
          [0033, 0009] (0015,             Parenth1) {(}
          [0033, 0010] (0041,                   Id) {i}
          [0033, 0011] (0038,                Comma) {,}
          [0033, 0013] (0042,               CteInt) {0}
          [0033, 0014] (0038,                Comma) {,}
          [0033, 0016] (0041,                   Id) {tam}
          [0033, 0019] (0022,              OpMinus) {-}
          [0033, 0020] (0042,               CteInt) {1}
          [0033, 0021] (0038,                Comma) {,}
          [0033, 0023] (0042,               CteInt) {1}
          [0033, 0024] (0016,             Parenth2) {)}
          [0033, 0025] (0017,              Braces1) {{}
  34          input(vet[i]);
          [0034, 0009] (0007,                Input) {input}
          [0034, 0014] (0015,             Parenth1) {(}
          [0034, 0015] (0041,                   Id) {vet}
          [0034, 0018] (0019,             Bracket1) {[}
          [0034, 0019] (0041,                   Id) {i}
          [0034, 0020] (0020,             Bracket2) {]}
          [0034, 0021] (0016,             Parenth2) {)}
          [0034, 0022] (0039,           Terminator) {;}
  35          output("%d ", vet[i]);
          [0035, 0009] (0008,               Output) {output}
          [0035, 0015] (0015,             Parenth1) {(}
          [0035, 0016] (0045,            CteString) {"%d "}
          [0035, 0021] (0038,                Comma) {,}
          [0035, 0023] (0041,                   Id) {vet}
          [0035, 0026] (0019,             Bracket1) {[}
          [0035, 0027] (0041,                   Id) {i}
          [0035, 0028] (0020,             Bracket2) {]}
          [0035, 0029] (0016,             Parenth2) {)}
          [0035, 0030] (0039,           Terminator) {;}
  36      }
          [0036, 0005] (0018,              Braces2) {}}
  37  
  38      shellSort(vet, tam);
          [0038, 0005] (0041,                   Id) {shellSort}
          [0038, 0014] (0015,             Parenth1) {(}
          [0038, 0015] (0041,                   Id) {vet}
          [0038, 0018] (0038,                Comma) {,}
          [0038, 0020] (0041,                   Id) {tam}
          [0038, 0023] (0016,             Parenth2) {)}
          [0038, 0024] (0039,           Terminator) {;}
  39  
  40      for (i, 0, tam-1, 1){
          [0040, 0005] (0004,              LoopFor) {for}
          [0040, 0009] (0015,             Parenth1) {(}
          [0040, 0010] (0041,                   Id) {i}
          [0040, 0011] (0038,                Comma) {,}
          [0040, 0013] (0042,               CteInt) {0}
          [0040, 0014] (0038,                Comma) {,}
          [0040, 0016] (0041,                   Id) {tam}
          [0040, 0019] (0022,              OpMinus) {-}
          [0040, 0020] (0042,               CteInt) {1}
          [0040, 0021] (0038,                Comma) {,}
          [0040, 0023] (0042,               CteInt) {1}
          [0040, 0024] (0016,             Parenth2) {)}
          [0040, 0025] (0017,              Braces1) {{}
  41          output("%d ", vet[i]);
          [0041, 0009] (0008,               Output) {output}
          [0041, 0015] (0015,             Parenth1) {(}
          [0041, 0016] (0045,            CteString) {"%d "}
          [0041, 0021] (0038,                Comma) {,}
          [0041, 0023] (0041,                   Id) {vet}
          [0041, 0026] (0019,             Bracket1) {[}
          [0041, 0027] (0041,                   Id) {i}
          [0041, 0028] (0020,             Bracket2) {]}
          [0041, 0029] (0016,             Parenth2) {)}
          [0041, 0030] (0039,           Terminator) {;}
  42      }
          [0042, 0005] (0018,              Braces2) {}}
  43  }
          [0043, 0001] (0018,              Braces2) {}}
          [0043, 0001] (0047,                  Eof) {}
