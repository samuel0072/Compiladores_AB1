   1  int fibonacci(int valor_limite){//comentario
          Decls = Decl Decls 
          Decl = Type DeclAux 
          Type = 'int' 
              [0001, 0001] (0008,              Integer) {int}
          DeclAux = 'Id' DeclBux 
              [0001, 0005] (0040,                   Id) {fibonacci}
          DeclBux = '(' ParamDef ')' '{' StmList '}' 
              [0001, 0014] (0014,             Parenth1) {(}
          ParamDef = Type 'Id' Array ParamDAux 
          Type = 'int' 
              [0001, 0015] (0008,              Integer) {int}
              [0001, 0019] (0040,                   Id) {valor_limite}
          Array = épsilon 
          ParamDAux = épsilon 
              [0001, 0031] (0015,             Parenth2) {)}
              [0001, 0032] (0016,              Braces1) {{}
   2      int a, b, aux;
          StmList = Stm StmList 
          Stm = VarDecl 
          VarDecl = Type 'Id' Array Init VarList ';' 
          Type = 'int' 
              [0002, 0005] (0008,              Integer) {int}
              [0002, 0009] (0040,                   Id) {a}
          Array = épsilon 
          Init = épsilon 
          VarList = ',' 'Id' Array Init VarList 
              [0002, 0010] (0037,                Comma) {,}
              [0002, 0012] (0040,                   Id) {b}
          Array = épsilon 
          Init = épsilon 
          VarList = ',' 'Id' Array Init VarList 
              [0002, 0013] (0037,                Comma) {,}
              [0002, 0015] (0040,                   Id) {aux}
          Array = épsilon 
          Init = épsilon 
          VarList = épsilon 
              [0002, 0018] (0038,           Terminator) {;}
   3  
   4      if(valor_limite >= 0){
          StmList = Stm StmList 
          Stm = 'if' '(' OpConc ')' '{' StmList '}' 
              [0004, 0005] (0000,               CtrlIf) {if}
              [0004, 0007] (0014,             Parenth1) {(}
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0004, 0008] (0040,                   Id) {valor_limite}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = '>=' OpAdd OpCAux 
              [0004, 0021] (0028,             OpGEqual) {>=}
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'CteInt' 
              [0004, 0024] (0041,               CteInt) {0}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0004, 0025] (0015,             Parenth2) {)}
              [0004, 0026] (0016,              Braces1) {{}
   5          int d = 0;
          StmList = Stm StmList 
          Stm = VarDecl 
          VarDecl = Type 'Id' Array Init VarList ';' 
          Type = 'int' 
              [0005, 0009] (0008,              Integer) {int}
              [0005, 0013] (0040,                   Id) {d}
          Array = épsilon 
          Init = '=' InitAux 
              [0005, 0015] (0036,               Assign) {=}
          InitAux = OpConc 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'CteInt' 
              [0005, 0017] (0041,               CteInt) {0}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
          VarList = épsilon 
              [0005, 0018] (0038,           Terminator) {;}
   6          output("%d", d);
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = 'output' '(' 'CteString' OutputList ')' ';' 
              [0006, 0009] (0007,               Output) {output}
              [0006, 0015] (0014,             Parenth1) {(}
              [0006, 0016] (0044,            CteString) {"%d"}
          OutputList = ',' ParamList 
              [0006, 0020] (0037,                Comma) {,}
          ParamList = 'Id' ParamLAux 
              [0006, 0022] (0040,                   Id) {d}
          ParamLAux = épsilon 
              [0006, 0023] (0015,             Parenth2) {)}
              [0006, 0024] (0038,           Terminator) {;}
   7  
   8          a = 0;
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = OpConc ';' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0008, 0009] (0040,                   Id) {a}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = '=' OpOr OpCoAux 
              [0008, 0011] (0036,               Assign) {=}
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'CteInt' 
              [0008, 0013] (0041,               CteInt) {0}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0008, 0014] (0038,           Terminator) {;}
   9          b = 1;
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = OpConc ';' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0009, 0009] (0040,                   Id) {b}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = '=' OpOr OpCoAux 
              [0009, 0011] (0036,               Assign) {=}
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'CteInt' 
              [0009, 0013] (0041,               CteInt) {1}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0009, 0014] (0038,           Terminator) {;}
  10          aux = a + b;
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = OpConc ';' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0010, 0009] (0040,                   Id) {aux}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = '=' OpOr OpCoAux 
              [0010, 0013] (0036,               Assign) {=}
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0010, 0015] (0040,                   Id) {a}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = '+' OpMult OpAddAux 
              [0010, 0017] (0020,                OpAdd) {+}
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0010, 0019] (0040,                   Id) {b}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0010, 0020] (0038,           Terminator) {;}
  11  
  12          while(aux <= limite){
          StmList = Stm StmList 
          Stm = 'while' '(' OpConc ')' '{' StmList '}' 
              [0012, 0009] (0002,            LoopWhile) {while}
              [0012, 0014] (0014,             Parenth1) {(}
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0012, 0015] (0040,                   Id) {aux}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = '<=' OpAdd OpCAux 
              [0012, 0019] (0029,             OpLEqual) {<=}
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0012, 0022] (0040,                   Id) {limite}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0012, 0028] (0015,             Parenth2) {)}
              [0012, 0029] (0016,              Braces1) {{}
  13              output(", %d", aux);
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = 'output' '(' 'CteString' OutputList ')' ';' 
              [0013, 0013] (0007,               Output) {output}
              [0013, 0019] (0014,             Parenth1) {(}
              [0013, 0020] (0044,            CteString) {", %d"}
          OutputList = ',' ParamList 
              [0013, 0026] (0037,                Comma) {,}
          ParamList = 'Id' ParamLAux 
              [0013, 0028] (0040,                   Id) {aux}
          ParamLAux = épsilon 
              [0013, 0031] (0015,             Parenth2) {)}
              [0013, 0032] (0038,           Terminator) {;}
  14              aux = a + b;
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = OpConc ';' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0014, 0013] (0040,                   Id) {aux}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = '=' OpOr OpCoAux 
              [0014, 0017] (0036,               Assign) {=}
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0014, 0019] (0040,                   Id) {a}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = '+' OpMult OpAddAux 
              [0014, 0021] (0020,                OpAdd) {+}
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0014, 0023] (0040,                   Id) {b}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0014, 0024] (0038,           Terminator) {;}
  15              a = b;
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = OpConc ';' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0015, 0013] (0040,                   Id) {a}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = '=' OpOr OpCoAux 
              [0015, 0015] (0036,               Assign) {=}
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0015, 0017] (0040,                   Id) {b}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0015, 0018] (0038,           Terminator) {;}
  16              b = aux;
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = OpConc ';' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0016, 0013] (0040,                   Id) {b}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = '=' OpOr OpCoAux 
              [0016, 0015] (0036,               Assign) {=}
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0016, 0017] (0040,                   Id) {aux}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0016, 0020] (0038,           Terminator) {;}
  17          }
          StmList = épsilon 
              [0017, 0009] (0017,              Braces2) {}}
  18      }
          StmList = épsilon 
              [0018, 0005] (0017,              Braces2) {}}
  19  }
          StmList = épsilon 
              [0019, 0001] (0017,              Braces2) {}}
  20  
  21  int main(){
          Decls = Decl Decls 
          Decl = Type DeclAux 
          Type = 'int' 
              [0021, 0001] (0008,              Integer) {int}
          DeclAux = 'Id' DeclBux 
              [0021, 0005] (0040,                   Id) {main}
          DeclBux = '(' ParamDef ')' '{' StmList '}' 
              [0021, 0009] (0014,             Parenth1) {(}
          ParamDef = épsilon 
              [0021, 0010] (0015,             Parenth2) {)}
              [0021, 0011] (0016,              Braces1) {{}
  22      int limite;
          StmList = Stm StmList 
          Stm = VarDecl 
          VarDecl = Type 'Id' Array Init VarList ';' 
          Type = 'int' 
              [0022, 0005] (0008,              Integer) {int}
              [0022, 0009] (0040,                   Id) {limite}
          Array = épsilon 
          Init = épsilon 
          VarList = épsilon 
              [0022, 0015] (0038,           Terminator) {;}
  23  
  24      output("Digite um valor limite: ");
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = 'output' '(' 'CteString' OutputList ')' ';' 
              [0024, 0005] (0007,               Output) {output}
              [0024, 0011] (0014,             Parenth1) {(}
              [0024, 0012] (0044,            CteString) {"Digite um valor limite: "}
          OutputList = épsilon 
              [0024, 0038] (0015,             Parenth2) {)}
              [0024, 0039] (0038,           Terminator) {;}
  25      input(limite);
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = 'input' '(' ParamList ')' ';' 
              [0025, 0005] (0006,                Input) {input}
              [0025, 0010] (0014,             Parenth1) {(}
          ParamList = 'Id' ParamLAux 
              [0025, 0011] (0040,                   Id) {limite}
          ParamLAux = épsilon 
              [0025, 0017] (0015,             Parenth2) {)}
              [0025, 0018] (0038,           Terminator) {;}
  26  
  27      fibonacci(limite);
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = OpConc ';' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0027, 0005] (0040,                   Id) {fibonacci}
          ValueAux = '(' ParamList ')' 
              [0027, 0014] (0014,             Parenth1) {(}
          ParamList = 'Id' ParamLAux 
              [0027, 0015] (0040,                   Id) {limite}
          ParamLAux = épsilon 
              [0027, 0021] (0015,             Parenth2) {)}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0027, 0022] (0038,           Terminator) {;}
  28  
  29      return 0;
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = 'return' OpConc ';' 
              [0029, 0005] (0005,               Return) {return}
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'CteInt' 
              [0029, 0012] (0041,               CteInt) {0}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0029, 0013] (0038,           Terminator) {;}
  30  }
          StmList = épsilon 
              [0030, 0001] (0017,              Braces2) {}}
          Decls = épsilon 
