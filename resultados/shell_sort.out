   1  //
   2  void shellSort(int vet[], int size){
          Decls = Decl Decls 
          Decl = Type DeclAux 
          Type = 'void' 
              [0002, 0001] (0011,                 Void) {void}
          DeclAux = 'Id' DeclBux 
              [0002, 0006] (0040,                   Id) {shellSort}
          DeclBux = '(' ParamDef ')' '{' StmList '}' 
              [0002, 0015] (0014,             Parenth1) {(}
          ParamDef = Type 'Id' Array ParamDAux 
          Type = 'int' 
              [0002, 0016] (0008,              Integer) {int}
              [0002, 0020] (0040,                   Id) {vet}
          Array = '[' ArrayAux 
              [0002, 0023] (0018,             Bracket1) {[}
          ArrayAux = ']' 
              [0002, 0024] (0019,             Bracket2) {]}
          ParamDAux = ',' Type 'Id' Array ParamDAux 
              [0002, 0025] (0037,                Comma) {,}
          Type = 'int' 
              [0002, 0027] (0008,              Integer) {int}
              [0002, 0031] (0040,                   Id) {size}
          Array = épsilon 
          ParamDAux = épsilon 
              [0002, 0035] (0015,             Parenth2) {)}
              [0002, 0036] (0016,              Braces1) {{}
   3  
   4      int i , j , value;
          StmList = Stm StmList 
          Stm = VarDecl 
          VarDecl = Type 'Id' Array Init VarList ';' 
          Type = 'int' 
              [0004, 0005] (0008,              Integer) {int}
              [0004, 0009] (0040,                   Id) {i}
          Array = épsilon 
          Init = épsilon 
          VarList = ',' 'Id' Array Init VarList 
              [0004, 0011] (0037,                Comma) {,}
              [0004, 0013] (0040,                   Id) {j}
          Array = épsilon 
          Init = épsilon 
          VarList = ',' 'Id' Array Init VarList 
              [0004, 0015] (0037,                Comma) {,}
              [0004, 0017] (0040,                   Id) {value}
          Array = épsilon 
          Init = épsilon 
          VarList = épsilon 
              [0004, 0022] (0038,           Terminator) {;}
   5      int gap = 1;
          StmList = Stm StmList 
          Stm = VarDecl 
          VarDecl = Type 'Id' Array Init VarList ';' 
          Type = 'int' 
              [0005, 0005] (0008,              Integer) {int}
              [0005, 0009] (0040,                   Id) {gap}
          Array = épsilon 
          Init = '=' InitAux 
              [0005, 0013] (0036,               Assign) {=}
          InitAux = OpConc 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'CteInt' 
              [0005, 0015] (0041,               CteInt) {1}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
          VarList = épsilon 
              [0005, 0016] (0038,           Terminator) {;}
   6             
   7      while(gap < size) {
          StmList = Stm StmList 
          Stm = 'while' '(' OpConc ')' '{' StmList '}' 
              [0007, 0005] (0002,            LoopWhile) {while}
              [0007, 0010] (0014,             Parenth1) {(}
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0007, 0011] (0040,                   Id) {gap}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = '<' OpAdd OpCAux 
              [0007, 0015] (0027,             OpLesser) {<}
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0007, 0017] (0040,                   Id) {size}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0007, 0021] (0015,             Parenth2) {)}
              [0007, 0023] (0016,              Braces1) {{}
   8          gap = 3*gap+1;
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = OpConc ';' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0008, 0009] (0040,                   Id) {gap}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = '=' OpOr OpCoAux 
              [0008, 0013] (0036,               Assign) {=}
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'CteInt' 
              [0008, 0015] (0041,               CteInt) {3}
          OpMAux = '*' OpUnary OpMAux 
              [0008, 0016] (0023,               OpMult) {*}
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0008, 0017] (0040,                   Id) {gap}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = '+' OpMult OpAddAux 
              [0008, 0020] (0020,                OpAdd) {+}
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'CteInt' 
              [0008, 0021] (0041,               CteInt) {1}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0008, 0022] (0038,           Terminator) {;}
   9      }
          StmList = épsilon 
              [0009, 0005] (0017,              Braces2) {}}
  10  
  11      while (gap > 0) {
          StmList = Stm StmList 
          Stm = 'while' '(' OpConc ')' '{' StmList '}' 
              [0011, 0005] (0002,            LoopWhile) {while}
              [0011, 0011] (0014,             Parenth1) {(}
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0011, 0012] (0040,                   Id) {gap}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = '>' OpAdd OpCAux 
              [0011, 0016] (0026,            OpGreater) {>}
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'CteInt' 
              [0011, 0018] (0041,               CteInt) {0}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0011, 0019] (0015,             Parenth2) {)}
              [0011, 0021] (0016,              Braces1) {{}
  12          int step = 1;
          StmList = Stm StmList 
          Stm = VarDecl 
          VarDecl = Type 'Id' Array Init VarList ';' 
          Type = 'int' 
              [0012, 0009] (0008,              Integer) {int}
              [0012, 0013] (0040,                   Id) {step}
          Array = épsilon 
          Init = '=' InitAux 
              [0012, 0018] (0036,               Assign) {=}
          InitAux = OpConc 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'CteInt' 
              [0012, 0020] (0041,               CteInt) {1}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
          VarList = épsilon 
              [0012, 0021] (0038,           Terminator) {;}
  13          for (i, gap, size, step) {
          StmList = Stm StmList 
          Stm = 'for' '(' 'Id' ',' 'Id' ',' 'Id' ',' 'Id' ')' '{' StmList '}' 
              [0013, 0009] (0003,              LoopFor) {for}
              [0013, 0013] (0014,             Parenth1) {(}
              [0013, 0014] (0040,                   Id) {i}
              [0013, 0015] (0037,                Comma) {,}
              [0013, 0017] (0040,                   Id) {gap}
              [0013, 0020] (0037,                Comma) {,}
              [0013, 0022] (0040,                   Id) {size}
              [0013, 0026] (0037,                Comma) {,}
              [0013, 0028] (0040,                   Id) {step}
              [0013, 0032] (0015,             Parenth2) {)}
              [0013, 0034] (0016,              Braces1) {{}
  14              value = vet[i];
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = OpConc ';' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0014, 0013] (0040,                   Id) {value}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = '=' OpOr OpCoAux 
              [0014, 0019] (0036,               Assign) {=}
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0014, 0021] (0040,                   Id) {vet}
          ValueAux = '[' OpConc ']' 
              [0014, 0024] (0018,             Bracket1) {[}
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0014, 0025] (0040,                   Id) {i}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0014, 0026] (0019,             Bracket2) {]}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0014, 0027] (0038,           Terminator) {;}
  15              j = i;
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = OpConc ';' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0015, 0013] (0040,                   Id) {j}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = '=' OpOr OpCoAux 
              [0015, 0015] (0036,               Assign) {=}
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0015, 0017] (0040,                   Id) {i}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0015, 0018] (0038,           Terminator) {;}
  16              while (j > gap-1 and value <= vet[j - gap]) {
          StmList = Stm StmList 
          Stm = 'while' '(' OpConc ')' '{' StmList '}' 
              [0016, 0013] (0002,            LoopWhile) {while}
              [0016, 0019] (0014,             Parenth1) {(}
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0016, 0020] (0040,                   Id) {j}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = '>' OpAdd OpCAux 
              [0016, 0022] (0026,            OpGreater) {>}
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0016, 0024] (0040,                   Id) {gap}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = '-' OpMult OpAddAux 
              [0016, 0027] (0021,              OpMinus) {-}
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'CteInt' 
              [0016, 0028] (0041,               CteInt) {1}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = 'and' OpEquate OpAXAux 
              [0016, 0030] (0034,                OpAnd) {and}
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0016, 0034] (0040,                   Id) {value}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = '<=' OpAdd OpCAux 
              [0016, 0040] (0029,             OpLEqual) {<=}
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0016, 0043] (0040,                   Id) {vet}
          ValueAux = '[' OpConc ']' 
              [0016, 0046] (0018,             Bracket1) {[}
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0016, 0047] (0040,                   Id) {j}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = '-' OpMult OpAddAux 
              [0016, 0049] (0021,              OpMinus) {-}
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0016, 0051] (0040,                   Id) {gap}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0016, 0054] (0019,             Bracket2) {]}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0016, 0055] (0015,             Parenth2) {)}
              [0016, 0057] (0016,              Braces1) {{}
  17                  vet[j] = vet [j - gap];
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = OpConc ';' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0017, 0017] (0040,                   Id) {vet}
          ValueAux = '[' OpConc ']' 
              [0017, 0020] (0018,             Bracket1) {[}
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0017, 0021] (0040,                   Id) {j}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0017, 0022] (0019,             Bracket2) {]}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = '=' OpOr OpCoAux 
              [0017, 0024] (0036,               Assign) {=}
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0017, 0026] (0040,                   Id) {vet}
          ValueAux = '[' OpConc ']' 
              [0017, 0030] (0018,             Bracket1) {[}
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0017, 0031] (0040,                   Id) {j}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = '-' OpMult OpAddAux 
              [0017, 0033] (0021,              OpMinus) {-}
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0017, 0035] (0040,                   Id) {gap}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0017, 0038] (0019,             Bracket2) {]}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0017, 0039] (0038,           Terminator) {;}
  18                  j = j - gap;
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = OpConc ';' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0018, 0017] (0040,                   Id) {j}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = '=' OpOr OpCoAux 
              [0018, 0019] (0036,               Assign) {=}
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0018, 0021] (0040,                   Id) {j}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = '-' OpMult OpAddAux 
              [0018, 0023] (0021,              OpMinus) {-}
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0018, 0025] (0040,                   Id) {gap}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0018, 0028] (0038,           Terminator) {;}
  19              }
          StmList = épsilon 
              [0019, 0013] (0017,              Braces2) {}}
  20              vet[j] = value;
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = OpConc ';' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0020, 0013] (0040,                   Id) {vet}
          ValueAux = '[' OpConc ']' 
              [0020, 0016] (0018,             Bracket1) {[}
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0020, 0017] (0040,                   Id) {j}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0020, 0018] (0019,             Bracket2) {]}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = '=' OpOr OpCoAux 
              [0020, 0020] (0036,               Assign) {=}
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0020, 0022] (0040,                   Id) {value}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0020, 0027] (0038,           Terminator) {;}
  21          }
          StmList = épsilon 
              [0021, 0009] (0017,              Braces2) {}}
  22          gap = gap/3;
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = OpConc ';' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0022, 0009] (0040,                   Id) {gap}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = '=' OpOr OpCoAux 
              [0022, 0013] (0036,               Assign) {=}
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0022, 0015] (0040,                   Id) {gap}
          ValueAux = épsilon 
          OpMAux = '/' OpUnary OpMAux 
              [0022, 0018] (0022,                OpDiv) {/}
          OpUnary = Value 
          Value = 'CteInt' 
              [0022, 0019] (0041,               CteInt) {3}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0022, 0020] (0038,           Terminator) {;}
  23      }
          StmList = épsilon 
              [0023, 0005] (0017,              Braces2) {}}
  24  }
          StmList = épsilon 
              [0024, 0001] (0017,              Braces2) {}}
  25  
  26  int main(){
          Decls = Decl Decls 
          Decl = Type DeclAux 
          Type = 'int' 
              [0026, 0001] (0008,              Integer) {int}
          DeclAux = 'Id' DeclBux 
              [0026, 0005] (0040,                   Id) {main}
          DeclBux = '(' ParamDef ')' '{' StmList '}' 
              [0026, 0009] (0014,             Parenth1) {(}
          ParamDef = épsilon 
              [0026, 0010] (0015,             Parenth2) {)}
              [0026, 0011] (0016,              Braces1) {{}
  27  
  28      int i, tam;
          StmList = Stm StmList 
          Stm = VarDecl 
          VarDecl = Type 'Id' Array Init VarList ';' 
          Type = 'int' 
              [0028, 0005] (0008,              Integer) {int}
              [0028, 0009] (0040,                   Id) {i}
          Array = épsilon 
          Init = épsilon 
          VarList = ',' 'Id' Array Init VarList 
              [0028, 0010] (0037,                Comma) {,}
              [0028, 0012] (0040,                   Id) {tam}
          Array = épsilon 
          Init = épsilon 
          VarList = épsilon 
              [0028, 0015] (0038,           Terminator) {;}
  29  
  30      input(tam);
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = 'input' '(' ParamList ')' ';' 
              [0030, 0005] (0006,                Input) {input}
              [0030, 0010] (0014,             Parenth1) {(}
          ParamList = 'Id' ParamLAux 
              [0030, 0011] (0040,                   Id) {tam}
          ParamLAux = épsilon 
              [0030, 0014] (0015,             Parenth2) {)}
              [0030, 0015] (0038,           Terminator) {;}
  31  
  32      int vet[tam];
          StmList = Stm StmList 
          Stm = VarDecl 
          VarDecl = Type 'Id' Array Init VarList ';' 
          Type = 'int' 
              [0032, 0005] (0008,              Integer) {int}
              [0032, 0009] (0040,                   Id) {vet}
          Array = '[' ArrayAux 
              [0032, 0012] (0018,             Bracket1) {[}
          ArrayAux = OpConc ']' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0032, 0013] (0040,                   Id) {tam}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0032, 0016] (0019,             Bracket2) {]}
          Init = épsilon 
          VarList = épsilon 
              [0032, 0017] (0038,           Terminator) {;}
  33      int step = 1;
          StmList = Stm StmList 
          Stm = VarDecl 
          VarDecl = Type 'Id' Array Init VarList ';' 
          Type = 'int' 
              [0033, 0005] (0008,              Integer) {int}
              [0033, 0009] (0040,                   Id) {step}
          Array = épsilon 
          Init = '=' InitAux 
              [0033, 0014] (0036,               Assign) {=}
          InitAux = OpConc 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'CteInt' 
              [0033, 0016] (0041,               CteInt) {1}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
          VarList = épsilon 
              [0033, 0017] (0038,           Terminator) {;}
  34      int base = 0;
          StmList = Stm StmList 
          Stm = VarDecl 
          VarDecl = Type 'Id' Array Init VarList ';' 
          Type = 'int' 
              [0034, 0005] (0008,              Integer) {int}
              [0034, 0009] (0040,                   Id) {base}
          Array = épsilon 
          Init = '=' InitAux 
              [0034, 0014] (0036,               Assign) {=}
          InitAux = OpConc 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'CteInt' 
              [0034, 0016] (0041,               CteInt) {0}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
          VarList = épsilon 
              [0034, 0017] (0038,           Terminator) {;}
  35      int limit = tam -1;
          StmList = Stm StmList 
          Stm = VarDecl 
          VarDecl = Type 'Id' Array Init VarList ';' 
          Type = 'int' 
              [0035, 0005] (0008,              Integer) {int}
              [0035, 0009] (0040,                   Id) {limit}
          Array = épsilon 
          Init = '=' InitAux 
              [0035, 0015] (0036,               Assign) {=}
          InitAux = OpConc 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0035, 0017] (0040,                   Id) {tam}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = '-' OpMult OpAddAux 
              [0035, 0021] (0021,              OpMinus) {-}
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'CteInt' 
              [0035, 0022] (0041,               CteInt) {1}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
          VarList = épsilon 
              [0035, 0023] (0038,           Terminator) {;}
  36      int b = 0;
          StmList = Stm StmList 
          Stm = VarDecl 
          VarDecl = Type 'Id' Array Init VarList ';' 
          Type = 'int' 
              [0036, 0005] (0008,              Integer) {int}
              [0036, 0009] (0040,                   Id) {b}
          Array = épsilon 
          Init = '=' InitAux 
              [0036, 0011] (0036,               Assign) {=}
          InitAux = OpConc 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'CteInt' 
              [0036, 0013] (0041,               CteInt) {0}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
          VarList = épsilon 
              [0036, 0014] (0038,           Terminator) {;}
  37      for (i, base, limit, step){
          StmList = Stm StmList 
          Stm = 'for' '(' 'Id' ',' 'Id' ',' 'Id' ',' 'Id' ')' '{' StmList '}' 
              [0037, 0005] (0003,              LoopFor) {for}
              [0037, 0009] (0014,             Parenth1) {(}
              [0037, 0010] (0040,                   Id) {i}
              [0037, 0011] (0037,                Comma) {,}
              [0037, 0013] (0040,                   Id) {base}
              [0037, 0017] (0037,                Comma) {,}
              [0037, 0019] (0040,                   Id) {limit}
              [0037, 0024] (0037,                Comma) {,}
              [0037, 0026] (0040,                   Id) {step}
              [0037, 0030] (0015,             Parenth2) {)}
              [0037, 0031] (0016,              Braces1) {{}
  38          input(b);
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = 'input' '(' ParamList ')' ';' 
              [0038, 0009] (0006,                Input) {input}
              [0038, 0014] (0014,             Parenth1) {(}
          ParamList = 'Id' ParamLAux 
              [0038, 0015] (0040,                   Id) {b}
          ParamLAux = épsilon 
              [0038, 0016] (0015,             Parenth2) {)}
              [0038, 0017] (0038,           Terminator) {;}
  39          vet[i] = b;
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = OpConc ';' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0039, 0009] (0040,                   Id) {vet}
          ValueAux = '[' OpConc ']' 
              [0039, 0012] (0018,             Bracket1) {[}
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0039, 0013] (0040,                   Id) {i}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0039, 0014] (0019,             Bracket2) {]}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = '=' OpOr OpCoAux 
              [0039, 0016] (0036,               Assign) {=}
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0039, 0018] (0040,                   Id) {b}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0039, 0019] (0038,           Terminator) {;}
  40          output("%d ", b);
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = 'output' '(' 'CteString' OutputList ')' ';' 
              [0040, 0009] (0007,               Output) {output}
              [0040, 0015] (0014,             Parenth1) {(}
              [0040, 0016] (0044,            CteString) {"%d "}
          OutputList = ',' ParamList 
              [0040, 0021] (0037,                Comma) {,}
          ParamList = 'Id' ParamLAux 
              [0040, 0023] (0040,                   Id) {b}
          ParamLAux = épsilon 
              [0040, 0024] (0015,             Parenth2) {)}
              [0040, 0025] (0038,           Terminator) {;}
  41      }
          StmList = épsilon 
              [0041, 0005] (0017,              Braces2) {}}
  42  
  43      shellSort(vet, tam);
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = OpConc ';' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0043, 0005] (0040,                   Id) {shellSort}
          ValueAux = '(' ParamList ')' 
              [0043, 0014] (0014,             Parenth1) {(}
          ParamList = 'Id' ParamLAux 
              [0043, 0015] (0040,                   Id) {vet}
          ParamLAux = ',' 'Id' ParamLAux 
              [0043, 0018] (0037,                Comma) {,}
              [0043, 0020] (0040,                   Id) {tam}
          ParamLAux = épsilon 
              [0043, 0023] (0015,             Parenth2) {)}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0043, 0024] (0038,           Terminator) {;}
  44  
  45      for (i, base, limit, step){
          StmList = Stm StmList 
          Stm = 'for' '(' 'Id' ',' 'Id' ',' 'Id' ',' 'Id' ')' '{' StmList '}' 
              [0045, 0005] (0003,              LoopFor) {for}
              [0045, 0009] (0014,             Parenth1) {(}
              [0045, 0010] (0040,                   Id) {i}
              [0045, 0011] (0037,                Comma) {,}
              [0045, 0013] (0040,                   Id) {base}
              [0045, 0017] (0037,                Comma) {,}
              [0045, 0019] (0040,                   Id) {limit}
              [0045, 0024] (0037,                Comma) {,}
              [0045, 0026] (0040,                   Id) {step}
              [0045, 0030] (0015,             Parenth2) {)}
              [0045, 0031] (0016,              Braces1) {{}
  46          b = vet[i];
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = OpConc ';' 
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0046, 0009] (0040,                   Id) {b}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = '=' OpOr OpCoAux 
              [0046, 0011] (0036,               Assign) {=}
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0046, 0013] (0040,                   Id) {vet}
          ValueAux = '[' OpConc ']' 
              [0046, 0016] (0018,             Bracket1) {[}
          OpConc = OpOr OpCoAux 
          OpOr = OpAndXor OpOrAux 
          OpAndXor = OpEquate OpAXAux 
          OpEquate = OpCompare OpEAux 
          OpCompare = OpAdd OpCAux 
          OpAdd = OpMult OpAddAux 
          OpMult = OpUnary OpMAux 
          OpUnary = Value 
          Value = 'Id' ValueAux 
              [0046, 0017] (0040,                   Id) {i}
          ValueAux = épsilon 
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0046, 0018] (0019,             Bracket2) {]}
          OpMAux = épsilon 
          OpAddAux = épsilon 
          OpCAux = épsilon 
          OpEAux = épsilon 
          OpAXAux = épsilon 
          OpOrAux = épsilon 
          OpCoAux = épsilon 
              [0046, 0019] (0038,           Terminator) {;}
  47          output("%d ", b);
          StmList = Stm StmList 
          Stm = NormalStm 
          NormalStm = 'output' '(' 'CteString' OutputList ')' ';' 
              [0047, 0009] (0007,               Output) {output}
              [0047, 0015] (0014,             Parenth1) {(}
              [0047, 0016] (0044,            CteString) {"%d "}
          OutputList = ',' ParamList 
              [0047, 0021] (0037,                Comma) {,}
          ParamList = 'Id' ParamLAux 
              [0047, 0023] (0040,                   Id) {b}
          ParamLAux = épsilon 
              [0047, 0024] (0015,             Parenth2) {)}
              [0047, 0025] (0038,           Terminator) {;}
  48      }
          StmList = épsilon 
              [0048, 0005] (0017,              Braces2) {}}
  49  }
          StmList = épsilon 
              [0049, 0001] (0017,              Braces2) {}}
          Decls = épsilon 
