1  int fibonacci(int valor_limite){//comentario
         [0001, 0001] (0009,              Integer) {int}
         [0001, 0005] (0041,                   Id) {fibonacci}
         [0001, 0014] (0015,             Parenth1) {(}
         [0001, 0015] (0009,              Integer) {int}
         [0001, 0019] (0041,                   Id) {valor_limite}
         [0001, 0031] (0016,             Parenth2) {)}
         [0001, 0032] (0017,              Braces1) {{}
2      int a, b, aux;
         [0002, 0005] (0009,              Integer) {int}
         [0002, 0009] (0041,                   Id) {a}
         [0002, 0010] (0038,                Comma) {,}
         [0002, 0012] (0041,                   Id) {b}
         [0002, 0013] (0038,                Comma) {,}
         [0002, 0015] (0041,                   Id) {aux}
         [0002, 0018] (0039,           Terminator) {;}
4      if(valor_limite >= 0){
         [0004, 0005] (0001,               CtrlIf) {if}
         [0004, 0007] (0015,             Parenth1) {(}
         [0004, 0008] (0041,                   Id) {valor_limite}
         [0004, 0021] (0029,             OpGEqual) {>=}
         [0004, 0024] (0042,               CteInt) {0}
         [0004, 0025] (0016,             Parenth2) {)}
         [0004, 0026] (0017,              Braces1) {{}
6          output("%d", "0");
         [0006, 0009] (0008,               Output) {output}
         [0006, 0015] (0015,             Parenth1) {(}
         [0006, 0016] (0045,            CteString) {"%d"}
         [0006, 0020] (0038,                Comma) {,}
         [0006, 0022] (0045,            CteString) {"0"}
         [0006, 0025] (0016,             Parenth2) {)}
         [0006, 0026] (0039,           Terminator) {;}
8          a = 0;
         [0008, 0009] (0041,                   Id) {a}
         [0008, 0011] (0037,               Assign) {=}
         [0008, 0013] (0042,               CteInt) {0}
         [0008, 0014] (0039,           Terminator) {;}
9          b = 1;
         [0009, 0009] (0041,                   Id) {b}
         [0009, 0011] (0037,               Assign) {=}
         [0009, 0013] (0042,               CteInt) {1}
         [0009, 0014] (0039,           Terminator) {;}
10          aux = a + b;
         [0010, 0009] (0041,                   Id) {aux}
         [0010, 0013] (0037,               Assign) {=}
         [0010, 0015] (0041,                   Id) {a}
         [0010, 0017] (0021,                OpAdd) {+}
         [0010, 0019] (0041,                   Id) {b}
         [0010, 0020] (0039,           Terminator) {;}
12          while(aux <= limite){
         [0012, 0009] (0003,            LoopWhile) {while}
         [0012, 0014] (0015,             Parenth1) {(}
         [0012, 0015] (0041,                   Id) {aux}
         [0012, 0019] (0030,             OpLEqual) {<=}
         [0012, 0022] (0041,                   Id) {limite}
         [0012, 0028] (0016,             Parenth2) {)}
         [0012, 0029] (0017,              Braces1) {{}
13              output(", %d", aux);
         [0013, 0013] (0008,               Output) {output}
         [0013, 0019] (0015,             Parenth1) {(}
         [0013, 0020] (0045,            CteString) {", %d"}
         [0013, 0026] (0038,                Comma) {,}
         [0013, 0028] (0041,                   Id) {aux}
         [0013, 0031] (0016,             Parenth2) {)}
         [0013, 0032] (0039,           Terminator) {;}
14              aux = a + b;
         [0014, 0013] (0041,                   Id) {aux}
         [0014, 0017] (0037,               Assign) {=}
         [0014, 0019] (0041,                   Id) {a}
         [0014, 0021] (0021,                OpAdd) {+}
         [0014, 0023] (0041,                   Id) {b}
         [0014, 0024] (0039,           Terminator) {;}
15              a = b;
         [0015, 0013] (0041,                   Id) {a}
         [0015, 0015] (0037,               Assign) {=}
         [0015, 0017] (0041,                   Id) {b}
         [0015, 0018] (0039,           Terminator) {;}
16              b = aux;
         [0016, 0013] (0041,                   Id) {b}
         [0016, 0015] (0037,               Assign) {=}
         [0016, 0017] (0041,                   Id) {aux}
         [0016, 0020] (0039,           Terminator) {;}
17          }
         [0017, 0009] (0018,              Braces2) {}}
18      }
         [0018, 0005] (0018,              Braces2) {}}
19  }
         [0019, 0001] (0018,              Braces2) {}}
21  int main(){
         [0021, 0001] (0009,              Integer) {int}
         [0021, 0005] (0041,                   Id) {main}
         [0021, 0009] (0015,             Parenth1) {(}
         [0021, 0010] (0016,             Parenth2) {)}
         [0021, 0011] (0017,              Braces1) {{}
22      int limite;
         [0022, 0005] (0009,              Integer) {int}
         [0022, 0009] (0041,                   Id) {limite}
         [0022, 0015] (0039,           Terminator) {;}
24      output("Digite um valor limite: ");
         [0024, 0005] (0008,               Output) {output}
         [0024, 0011] (0015,             Parenth1) {(}
         [0024, 0012] (0045,            CteString) {"Digite um valor limite: "}
         [0024, 0038] (0016,             Parenth2) {)}
         [0024, 0039] (0039,           Terminator) {;}
25      input(limite);
         [0025, 0005] (0007,                Input) {input}
         [0025, 0010] (0015,             Parenth1) {(}
         [0025, 0011] (0041,                   Id) {limite}
         [0025, 0017] (0016,             Parenth2) {)}
         [0025, 0018] (0039,           Terminator) {;}
27      fibonacci(limite);
         [0027, 0005] (0041,                   Id) {fibonacci}
         [0027, 0014] (0015,             Parenth1) {(}
         [0027, 0015] (0041,                   Id) {limite}
         [0027, 0021] (0016,             Parenth2) {)}
         [0027, 0022] (0039,           Terminator) {;}
29      return 0;
         [0029, 0005] (0006,               Return) {return}
         [0029, 0012] (0042,               CteInt) {0}
         [0029, 0013] (0039,           Terminator) {;}
30  }
         [0030, 0001] (0018,              Braces2) {}}
         [0031, 0000] (0047,                  Eof) {}
