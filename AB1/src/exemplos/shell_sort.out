1  void shellSort(int vet[], int size){
         [0001, 0001] (0012,                 Void) {void}
         [0001, 0006] (0041,                   Id) {shellSort}
         [0001, 0015] (0015,             Parenth1) {(}
         [0001, 0016] (0009,              Integer) {int}
         [0001, 0020] (0041,                   Id) {vet}
         [0001, 0023] (0019,             Bracket1) {[}
         [0001, 0024] (0020,             Bracket2) {]}
         [0001, 0025] (0038,                Comma) {,}
         [0001, 0027] (0009,              Integer) {int}
         [0001, 0031] (0041,                   Id) {size}
         [0001, 0035] (0016,             Parenth2) {)}
         [0001, 0036] (0017,              Braces1) {{}
3      int i , j , value;
         [0003, 0005] (0009,              Integer) {int}
         [0003, 0009] (0041,                   Id) {i}
         [0003, 0011] (0038,                Comma) {,}
         [0003, 0013] (0041,                   Id) {j}
         [0003, 0015] (0038,                Comma) {,}
         [0003, 0017] (0041,                   Id) {value}
         [0003, 0022] (0039,           Terminator) {;}
4      int gap = 1;
         [0004, 0005] (0009,              Integer) {int}
         [0004, 0009] (0041,                   Id) {gap}
         [0004, 0013] (0037,               Assign) {=}
         [0004, 0015] (0042,               CteInt) {1}
         [0004, 0016] (0039,           Terminator) {;}
6      while(gap < size) {
         [0006, 0005] (0003,            LoopWhile) {while}
         [0006, 0010] (0015,             Parenth1) {(}
         [0006, 0011] (0041,                   Id) {gap}
         [0006, 0015] (0028,             OpLesser) {<}
         [0006, 0017] (0041,                   Id) {size}
         [0006, 0021] (0016,             Parenth2) {)}
         [0006, 0023] (0017,              Braces1) {{}
7          gap = 3*gap+1;
         [0007, 0009] (0041,                   Id) {gap}
         [0007, 0013] (0037,               Assign) {=}
         [0007, 0015] (0042,               CteInt) {3}
         [0007, 0016] (0024,               OpMult) {*}
         [0007, 0017] (0041,                   Id) {gap}
         [0007, 0020] (0021,                OpAdd) {+}
         [0007, 0021] (0042,               CteInt) {1}
         [0007, 0022] (0039,           Terminator) {;}
8      }
         [0008, 0005] (0018,              Braces2) {}}
10      while (gap > 0) {
         [0010, 0005] (0003,            LoopWhile) {while}
         [0010, 0011] (0015,             Parenth1) {(}
         [0010, 0012] (0041,                   Id) {gap}
         [0010, 0016] (0027,            OpGreater) {>}
         [0010, 0018] (0042,               CteInt) {0}
         [0010, 0019] (0016,             Parenth2) {)}
         [0010, 0021] (0017,              Braces1) {{}
11          for (i, gap, size, 1) {
         [0011, 0009] (0004,              LoopFor) {for}
         [0011, 0013] (0015,             Parenth1) {(}
         [0011, 0014] (0041,                   Id) {i}
         [0011, 0015] (0038,                Comma) {,}
         [0011, 0017] (0041,                   Id) {gap}
         [0011, 0020] (0038,                Comma) {,}
         [0011, 0022] (0041,                   Id) {size}
         [0011, 0026] (0038,                Comma) {,}
         [0011, 0028] (0042,               CteInt) {1}
         [0011, 0029] (0016,             Parenth2) {)}
         [0011, 0031] (0017,              Braces1) {{}
12              value = vet[i];
         [0012, 0013] (0041,                   Id) {value}
         [0012, 0019] (0037,               Assign) {=}
         [0012, 0021] (0041,                   Id) {vet}
         [0012, 0024] (0019,             Bracket1) {[}
         [0012, 0025] (0041,                   Id) {i}
         [0012, 0026] (0020,             Bracket2) {]}
         [0012, 0027] (0039,           Terminator) {;}
13              j = i;
         [0013, 0013] (0041,                   Id) {j}
         [0013, 0015] (0037,               Assign) {=}
         [0013, 0017] (0041,                   Id) {i}
         [0013, 0018] (0039,           Terminator) {;}
14              while (j > gap-1 and value <= vet[j - gap]) {
         [0014, 0013] (0003,            LoopWhile) {while}
         [0014, 0019] (0015,             Parenth1) {(}
         [0014, 0020] (0041,                   Id) {j}
         [0014, 0022] (0027,            OpGreater) {>}
         [0014, 0024] (0041,                   Id) {gap}
         [0014, 0027] (0022,              OpMinus) {-}
         [0014, 0028] (0042,               CteInt) {1}
         [0014, 0030] (0035,                OpAnd) {and}
         [0014, 0034] (0041,                   Id) {value}
         [0014, 0040] (0030,             OpLEqual) {<=}
         [0014, 0043] (0041,                   Id) {vet}
         [0014, 0046] (0019,             Bracket1) {[}
         [0014, 0047] (0041,                   Id) {j}
         [0014, 0049] (0022,              OpMinus) {-}
         [0014, 0051] (0041,                   Id) {gap}
         [0014, 0054] (0020,             Bracket2) {]}
         [0014, 0055] (0016,             Parenth2) {)}
         [0014, 0057] (0017,              Braces1) {{}
15                  vet[j] = vet [j - gap];
         [0015, 0017] (0041,                   Id) {vet}
         [0015, 0020] (0019,             Bracket1) {[}
         [0015, 0021] (0041,                   Id) {j}
         [0015, 0022] (0020,             Bracket2) {]}
         [0015, 0024] (0037,               Assign) {=}
         [0015, 0026] (0041,                   Id) {vet}
         [0015, 0030] (0019,             Bracket1) {[}
         [0015, 0031] (0041,                   Id) {j}
         [0015, 0033] (0022,              OpMinus) {-}
         [0015, 0035] (0041,                   Id) {gap}
         [0015, 0038] (0020,             Bracket2) {]}
         [0015, 0039] (0039,           Terminator) {;}
16                  j = j - gap;
         [0016, 0017] (0041,                   Id) {j}
         [0016, 0019] (0037,               Assign) {=}
         [0016, 0021] (0041,                   Id) {j}
         [0016, 0023] (0022,              OpMinus) {-}
         [0016, 0025] (0041,                   Id) {gap}
         [0016, 0028] (0039,           Terminator) {;}
17              }
         [0017, 0013] (0018,              Braces2) {}}
18              vet[j] = value;
         [0018, 0013] (0041,                   Id) {vet}
         [0018, 0016] (0019,             Bracket1) {[}
         [0018, 0017] (0041,                   Id) {j}
         [0018, 0018] (0020,             Bracket2) {]}
         [0018, 0020] (0037,               Assign) {=}
         [0018, 0022] (0041,                   Id) {value}
         [0018, 0027] (0039,           Terminator) {;}
19          }
         [0019, 0009] (0018,              Braces2) {}}
20          gap = gap/3;
         [0020, 0009] (0041,                   Id) {gap}
         [0020, 0013] (0037,               Assign) {=}
         [0020, 0015] (0041,                   Id) {gap}
         [0020, 0018] (0023,                OpDiv) {/}
         [0020, 0019] (0042,               CteInt) {3}
         [0020, 0020] (0039,           Terminator) {;}
21      }
         [0021, 0005] (0018,              Braces2) {}}
22  }
         [0022, 0001] (0018,              Braces2) {}}
24  int main(){
         [0024, 0001] (0009,              Integer) {int}
         [0024, 0005] (0041,                   Id) {main}
         [0024, 0009] (0015,             Parenth1) {(}
         [0024, 0010] (0016,             Parenth2) {)}
         [0024, 0011] (0017,              Braces1) {{}
26      int i, tam;
         [0026, 0005] (0009,              Integer) {int}
         [0026, 0009] (0041,                   Id) {i}
         [0026, 0010] (0038,                Comma) {,}
         [0026, 0012] (0041,                   Id) {tam}
         [0026, 0015] (0039,           Terminator) {;}
28      input(tam);
         [0028, 0005] (0007,                Input) {input}
         [0028, 0010] (0015,             Parenth1) {(}
         [0028, 0011] (0041,                   Id) {tam}
         [0028, 0014] (0016,             Parenth2) {)}
         [0028, 0015] (0039,           Terminator) {;}
30      int vet[tam];
         [0030, 0005] (0009,              Integer) {int}
         [0030, 0009] (0041,                   Id) {vet}
         [0030, 0012] (0019,             Bracket1) {[}
         [0030, 0013] (0041,                   Id) {tam}
         [0030, 0016] (0020,             Bracket2) {]}
         [0030, 0017] (0039,           Terminator) {;}
32      for (i, 0, tam-1, 1){
         [0032, 0005] (0004,              LoopFor) {for}
         [0032, 0009] (0015,             Parenth1) {(}
         [0032, 0010] (0041,                   Id) {i}
         [0032, 0011] (0038,                Comma) {,}
         [0032, 0013] (0042,               CteInt) {0}
         [0032, 0014] (0038,                Comma) {,}
         [0032, 0016] (0041,                   Id) {tam}
         [0032, 0019] (0022,              OpMinus) {-}
         [0032, 0020] (0042,               CteInt) {1}
         [0032, 0021] (0038,                Comma) {,}
         [0032, 0023] (0042,               CteInt) {1}
         [0032, 0024] (0016,             Parenth2) {)}
         [0032, 0025] (0017,              Braces1) {{}
33          input(vet[i]);
         [0033, 0009] (0007,                Input) {input}
         [0033, 0014] (0015,             Parenth1) {(}
         [0033, 0015] (0041,                   Id) {vet}
         [0033, 0018] (0019,             Bracket1) {[}
         [0033, 0019] (0041,                   Id) {i}
         [0033, 0020] (0020,             Bracket2) {]}
         [0033, 0021] (0016,             Parenth2) {)}
         [0033, 0022] (0039,           Terminator) {;}
34          output("%d ", vet[i]);
         [0034, 0009] (0008,               Output) {output}
         [0034, 0015] (0015,             Parenth1) {(}
         [0034, 0016] (0045,            CteString) {"%d "}
         [0034, 0021] (0038,                Comma) {,}
         [0034, 0023] (0041,                   Id) {vet}
         [0034, 0026] (0019,             Bracket1) {[}
         [0034, 0027] (0041,                   Id) {i}
         [0034, 0028] (0020,             Bracket2) {]}
         [0034, 0029] (0016,             Parenth2) {)}
         [0034, 0030] (0039,           Terminator) {;}
35      }
         [0035, 0005] (0018,              Braces2) {}}
37      shellSort(vet, tam);
         [0037, 0005] (0041,                   Id) {shellSort}
         [0037, 0014] (0015,             Parenth1) {(}
         [0037, 0015] (0041,                   Id) {vet}
         [0037, 0018] (0038,                Comma) {,}
         [0037, 0020] (0041,                   Id) {tam}
         [0037, 0023] (0016,             Parenth2) {)}
         [0037, 0024] (0039,           Terminator) {;}
39      for (i, 0, tam-1, 1){
         [0039, 0005] (0004,              LoopFor) {for}
         [0039, 0009] (0015,             Parenth1) {(}
         [0039, 0010] (0041,                   Id) {i}
         [0039, 0011] (0038,                Comma) {,}
         [0039, 0013] (0042,               CteInt) {0}
         [0039, 0014] (0038,                Comma) {,}
         [0039, 0016] (0041,                   Id) {tam}
         [0039, 0019] (0022,              OpMinus) {-}
         [0039, 0020] (0042,               CteInt) {1}
         [0039, 0021] (0038,                Comma) {,}
         [0039, 0023] (0042,               CteInt) {1}
         [0039, 0024] (0016,             Parenth2) {)}
         [0039, 0025] (0017,              Braces1) {{}
40          output("%d ", vet[i]);
         [0040, 0009] (0008,               Output) {output}
         [0040, 0015] (0015,             Parenth1) {(}
         [0040, 0016] (0045,            CteString) {"%d "}
         [0040, 0021] (0038,                Comma) {,}
         [0040, 0023] (0041,                   Id) {vet}
         [0040, 0026] (0019,             Bracket1) {[}
         [0040, 0027] (0041,                   Id) {i}
         [0040, 0028] (0020,             Bracket2) {]}
         [0040, 0029] (0016,             Parenth2) {)}
         [0040, 0030] (0039,           Terminator) {;}
41      }
         [0041, 0005] (0018,              Braces2) {}}
42  }
         [0042, 0001] (0018,              Braces2) {}}
         [0043, 0000] (0047,                  Eof) {}
